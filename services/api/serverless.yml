service: fhr-api

frameworkVersion: '3'

configValidationMode: error

provider:
  name: aws
  runtime: nodejs20.x
  stage: v1
  region: ${env:FHR_REGION}
  stackName: fhr-api-${env:FHR_ENV}
  apiName: fhr-api-${env:FHR_ENV}
  endpointType: regional
  resourcePolicy:
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*/*
  environment:
    ENV: ${env:FHR_ENV}
    REGION: ${env:FHR_REGION}
    FHR_TABLE:
      Fn::ImportValue: {Fn::Join: [':', [Ref: DatabaseStackName, FhrTableName]]}
  tags:
    environment: ${env:FHR_ENV}
    scope: fhr-api
    serverlessframework: true

custom:
  name: fhr-api
  dbStackName: fhr-db-${env:FHR_ENV}
  output:
    file: build/serverless-output.yml

plugins:
  - serverless-stack-output
  - serverless-iam-roles-per-function

package:
  individually: true
  include:
    - node_modules/**
  exclude:
    - ./**

functions:
  create-league:
    handler: league/create.create
    name: fhr-api-${env:FHR_ENV}-create-league
    description: "Create a league"
    events:
      - http:
          path: league
          method: post
          cors: true
    package:
      include:
        - league/create.js
    iamRoleStatementsName: ${self:functions.create-league.name}-lambda-role
    iamRoleStatements:
      - Effect: Allow
        Action: &dynamo-write
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: &dynamo-table-arns
          - Fn::ImportValue: {Fn::Join: [':', [Ref: DatabaseStackName, FhrTableArn]]}
  player-get:
    handler: player/get.get
    name: fhr-api-${env:FHR_ENV}-player-get
    description: "Get player by id"
    events:
      - http:
          path: player/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
    package:
      include:
        - player/get.js
        - ../lib/*.js
    iamRoleStatementsName: ${self:functions.player-get.name}-lambda-role
    iamRoleStatements:
      - Effect: Allow
        Action: *dynamo-write
        Resource: *dynamo-table-arns
  migrate:
    handler: migrate/add.add
    name: fhr-api-${env:FHR_ENV}-migrate
    description: "Migrate data"
    events:
      - http:
          path: migrate
          method: post
          cors: true
    package:
      include:
        - migrate/add.js
    iamRoleStatementsName: ${self:functions.migrate.name}-lambda-role
    iamRoleStatements:
      - Effect: Allow
        Action: *dynamo-write
        Resource: *dynamo-table-arns
resources:
  Parameters:
    Env:
      Type: String
      Default: ${env:FHR_ENV}
      Description: Short name for hosting environment
    Environment:
      Type: String
      Default: ${env:FHR_ENV}
      Description: Long name for hosting environment
    DatabaseStackName:
      Type: String
      Default: ${self:custom.dbStackName}
      Description: Stack name of the database stack
